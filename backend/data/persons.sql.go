// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: persons.sql

package data

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :execresult
INSERT INTO persons (
  email,
  full_name,
  chosen_course_id
) VALUES (
  ?,
  ?,
  ?
)
`

type CreatePersonParams struct {
	Email          sql.NullString `json:"email"`
	FullName       string         `json:"full_name"`
	ChosenCourseID int64          `json:"chosen_course_id"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPerson, arg.Email, arg.FullName, arg.ChosenCourseID)
}

const deletePerson = `-- name: DeletePerson :execresult
DELETE FROM persons
WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePerson, id)
}

const getPerson = `-- name: GetPerson :one
SELECT id, email, full_name, chosen_course_id, created_at
FROM persons
WHERE id = ?
`

func (q *Queries) GetPerson(ctx context.Context, id int64) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.ChosenCourseID,
		&i.CreatedAt,
	)
	return i, err
}

const getPersonByEmail = `-- name: GetPersonByEmail :one
SELECT id, email, full_name, chosen_course_id, created_at
FROM persons
WHERE email = ?
`

func (q *Queries) GetPersonByEmail(ctx context.Context, email sql.NullString) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByEmail, email)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.ChosenCourseID,
		&i.CreatedAt,
	)
	return i, err
}

const listPersons = `-- name: ListPersons :many
SELECT id, email, full_name, chosen_course_id, created_at
FROM persons
ORDER BY full_name
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.ChosenCourseID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :execresult
UPDATE persons
SET email = ?,
    full_name = ?,
    chosen_course_id = ?
WHERE id = ?
`

type UpdatePersonParams struct {
	Email          sql.NullString `json:"email"`
	FullName       string         `json:"full_name"`
	ChosenCourseID int64          `json:"chosen_course_id"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePerson,
		arg.Email,
		arg.FullName,
		arg.ChosenCourseID,
		arg.ID,
	)
}

const updatePersonChosenCourse = `-- name: UpdatePersonChosenCourse :execresult
UPDATE persons
SET chosen_course_id = ?
WHERE id = ?
`

type UpdatePersonChosenCourseParams struct {
	ChosenCourseID int64 `json:"chosen_course_id"`
	ID             int64 `json:"id"`
}

func (q *Queries) UpdatePersonChosenCourse(ctx context.Context, arg UpdatePersonChosenCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePersonChosenCourse, arg.ChosenCourseID, arg.ID)
}
