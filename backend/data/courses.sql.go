// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: courses.sql

package data

import (
	"context"
	"database/sql"
)

const createChosenReservedCourse = `-- name: CreateChosenReservedCourse :execresult
INSERT INTO chosen_reserved_courses (
  person_id,
  course_id
) VALUES (
  ?,
  ?
)
`

type CreateChosenReservedCourseParams struct {
	PersonID int64 `json:"person_id"`
	CourseID int64 `json:"course_id"`
}

func (q *Queries) CreateChosenReservedCourse(ctx context.Context, arg CreateChosenReservedCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createChosenReservedCourse, arg.PersonID, arg.CourseID)
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
  name,
  max_persons
) VALUES (
  ?,
  ?
)
RETURNING id, name, max_persons, created_at
`

type CreateCourseParams struct {
	Name       string `json:"name"`
	MaxPersons int64  `json:"max_persons"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse, arg.Name, arg.MaxPersons)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxPersons,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChosenReservedCourse = `-- name: DeleteChosenReservedCourse :execresult
DELETE FROM chosen_reserved_courses
WHERE id = ?
`

func (q *Queries) DeleteChosenReservedCourse(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChosenReservedCourse, id)
}

const deleteChosenReservedCoursesByCourseID = `-- name: DeleteChosenReservedCoursesByCourseID :execresult
DELETE FROM chosen_reserved_courses
WHERE course_id = ?
`

func (q *Queries) DeleteChosenReservedCoursesByCourseID(ctx context.Context, courseID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChosenReservedCoursesByCourseID, courseID)
}

const deleteChosenReservedCoursesByPersonID = `-- name: DeleteChosenReservedCoursesByPersonID :execresult
DELETE FROM chosen_reserved_courses
WHERE person_id = ?
`

func (q *Queries) DeleteChosenReservedCoursesByPersonID(ctx context.Context, personID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChosenReservedCoursesByPersonID, personID)
}

const deleteCourse = `-- name: DeleteCourse :execresult
DELETE FROM courses
WHERE id = ?
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCourse, id)
}

const getChosenReservedCourse = `-- name: GetChosenReservedCourse :one
SELECT id, person_id, course_id
FROM chosen_reserved_courses
WHERE id = ?
`

func (q *Queries) GetChosenReservedCourse(ctx context.Context, id int64) (ChosenReservedCourse, error) {
	row := q.db.QueryRowContext(ctx, getChosenReservedCourse, id)
	var i ChosenReservedCourse
	err := row.Scan(&i.ID, &i.PersonID, &i.CourseID)
	return i, err
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, max_persons, created_at
FROM courses
WHERE id = ?
`

func (q *Queries) GetCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxPersons,
		&i.CreatedAt,
	)
	return i, err
}

const getNumberOfPersonsInCourse = `-- name: GetNumberOfPersonsInCourse :one
SELECT
  COUNT(p.id) AS number_of_persons
FROM
  courses c
LEFT JOIN
  persons p ON c.id = p.course_id
WHERE
  c.id = ?
`

func (q *Queries) GetNumberOfPersonsInCourse(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfPersonsInCourse, id)
	var number_of_persons int64
	err := row.Scan(&number_of_persons)
	return number_of_persons, err
}

const listChosenReservedCoursesByCourseID = `-- name: ListChosenReservedCoursesByCourseID :many
SELECT id, person_id, course_id
FROM chosen_reserved_courses
WHERE course_id = ?
ORDER BY id
`

func (q *Queries) ListChosenReservedCoursesByCourseID(ctx context.Context, courseID int64) ([]ChosenReservedCourse, error) {
	rows, err := q.db.QueryContext(ctx, listChosenReservedCoursesByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChosenReservedCourse
	for rows.Next() {
		var i ChosenReservedCourse
		if err := rows.Scan(&i.ID, &i.PersonID, &i.CourseID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChosenReservedCoursesByPersonID = `-- name: ListChosenReservedCoursesByPersonID :many
SELECT id, person_id, course_id
FROM chosen_reserved_courses
WHERE person_id = ?
ORDER BY id
`

func (q *Queries) ListChosenReservedCoursesByPersonID(ctx context.Context, personID int64) ([]ChosenReservedCourse, error) {
	rows, err := q.db.QueryContext(ctx, listChosenReservedCoursesByPersonID, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChosenReservedCourse
	for rows.Next() {
		var i ChosenReservedCourse
		if err := rows.Scan(&i.ID, &i.PersonID, &i.CourseID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCourses = `-- name: ListCourses :many
SELECT id, name, max_persons, created_at
FROM courses
ORDER BY name
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MaxPersons,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :execresult
UPDATE courses
SET name = ?,
    max_persons = ?
WHERE id = ?
`

type UpdateCourseParams struct {
	Name       string `json:"name"`
	MaxPersons int64  `json:"max_persons"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCourse, arg.Name, arg.MaxPersons, arg.ID)
}
